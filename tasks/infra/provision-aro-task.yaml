apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: provision-aro
spec:
  description: 'Provisions ARO (OCP on Azure)'
  params:
    - name: azure-credentials
      type: string
    - name: create-cmd-flags
      type: string
    - name: cluster-name
      type: string
    - name: aro-pull-secret
      type: string
    - name: location
      type: string
    - name: provision-cluster
      type: string
  results:
    - name: password
      description: kubeadmin password
    - name: api-url
      description: API URL of the cluster
    - name: console-url
      description: console URL of the cluster
    - name: login-command
      description: full login command
    - name: credentials-secret
      description: secret name with credentials
  steps:
    - computeResources:
        limits:
          cpu: '150m'
          memory: 400Mi
      env:
        - name: APP_ID
          valueFrom:
            secretKeyRef:
              key: APP_ID
              name: $(params.azure-credentials)
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: PASSWORD
              name: $(params.azure-credentials)
        - name: TENANT_ID
          valueFrom:
            secretKeyRef:
              key: TENANT_ID
              name: $(params.azure-credentials)
        - name: SUBSCRIPTION_ID
          valueFrom:
            secretKeyRef:
              key: SUBSCRIPTION_ID
              name: $(params.azure-credentials)
        - name: PULL_SECRET
          valueFrom:
            secretKeyRef:
              key: .dockerconfigjson
              name: $(params.aro-pull-secret)
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      image: quay.io/kuadrant/testsuite-pipelines-tools:latest
      imagePullPolicy: Always
      name: provision-aro
      script: |
        #!/usr/bin/env bash
        set -evo pipefail

        CLUSTER_NAME="$(params.cluster-name)"
        LOCATION="$(params.location)"
        RESOURCE_GROUP="$CLUSTER_NAME"
        VNET_NAME="$CLUSTER_NAME-vnet"
        MASTER_SUBNET="$CLUSTER_NAME-ms"
        WORKER_SUBNET="$CLUSTER_NAME-ws"

        echo "Login using Service Principal"
        az login --service-principal -u "$APP_ID" -p "$PASSWORD" --tenant "$TENANT_ID"

        echo "Set subscription"
        az account set --subscription "$SUBSCRIPTION_ID"

        # determine what version to use if not specified
        version=""
        if [[ "$(params.create-cmd-flags)" != *"--version"* ]]; then
          version=" --version=$(az aro get-versions --location $LOCATION | jq -r '.[-1]')"
        fi

        echo "Create Resource Group"
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            az group create --name "$RESOURCE_GROUP" --location "$LOCATION" --tags 'owner=kua-pipeline'
        fi

        # Register required providers
        az provider register -n "Microsoft.RedHatOpenShift" --wait
        az provider register -n "Microsoft.Authorization" --wait
        az provider register -n "Microsoft.Network" --wait
        az provider register -n "Microsoft.Compute" --wait
        az provider register -n "Microsoft.ContainerRegistry" --wait
        az provider register -n "Microsoft.ContainerService" --wait
        az provider register -n "Microsoft.KeyVault" --wait
        az provider register -n "Microsoft.Solutions" --wait
        az provider register -n "Microsoft.Storage" --wait

        echo "Create Virtual Network"
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            az network vnet create -g "$RESOURCE_GROUP" -n "$VNET_NAME" --address-prefixes 10.0.0.0/22 --tags 'owner=kua-pipeline'
        fi

        echo "Create Subnets"
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            az network vnet subnet create -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$MASTER_SUBNET" --address-prefixes 10.0.0.0/23 --service-endpoints Microsoft.ContainerRegistry
            az network vnet subnet create -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$WORKER_SUBNET" --address-prefixes 10.0.2.0/23 --service-endpoints Microsoft.ContainerRegistry
        fi

        echo "Disable subnet private link service network policies"
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            az network vnet subnet update -g "$RESOURCE_GROUP" --vnet-name "$VNET_NAME" -n "$MASTER_SUBNET" --private-link-service-network-policies Disabled
        fi

        echo "Create the ARO Cluster"
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            az aro create -g "$RESOURCE_GROUP" -n "$CLUSTER_NAME" --location "$LOCATION" --pull-secret "$PULL_SECRET" --master-subnet "$MASTER_SUBNET" --worker-subnet "$WORKER_SUBNET" --vnet "$VNET_NAME" --client-id "$APP_ID" --client-secret "$PASSWORD" --debug $(params.create-cmd-flags) $version
        fi

        echo "Get cluster info"
        username=$(az aro list-credentials -g "$RESOURCE_GROUP" -n "$CLUSTER_NAME" | jq -r '.kubeadminUsername')
        password=$(az aro list-credentials -g "$RESOURCE_GROUP" -n "$CLUSTER_NAME" | jq -r '.kubeadminPassword')
        api_url=$(az aro show -g "$RESOURCE_GROUP" -n "$CLUSTER_NAME" | jq -r '.apiserverProfile.url')
        console_url=$(az aro show -g "$RESOURCE_GROUP" -n "$CLUSTER_NAME" | jq -r '.consoleProfile.url')
        login_cmd=$(echo "oc login $api_url -u $username -p $password")

        # Return Cluster Information
        echo -n $password | tee $(results.password.path) && echo ""

        echo -n $api_url | tee $(results.api-url.path) && echo ""

        echo -n $console_url | tee $(results.console-url.path) && echo ""

        echo -n $login_cmd | tee $(results.login-command.path) && echo ""

        # Create secret with cluster credentials
        echo -n "${CLUSTER_NAME}-credentials" | tee $(results.credentials-secret.path)
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            kubectl create secret generic "${CLUSTER_NAME}-credentials" --from-literal=KUBE_USER="$username" --from-literal=KUBE_PASSWORD="$password" -n ${NAMESPACE}
        fi
