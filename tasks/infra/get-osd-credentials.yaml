apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-osd-credentials
spec:
  description: 'Get OSD or ROSA cluster credentials'
  params:
    - name: cluster-id
      type: string
    - name: provision-cluster
      type: string
  results:
    - name: password
      description: kubeadmin password
    - name: kube-api
      description: API URL of the cluster
    - name: console-url
      description: console URL of the cluster
    - name: kubeadmin-console-url
      description: console URL of the cluster for kubeadmin user
    - name: login-command
      description: full login command
    - name: credentials-secret
      description: secret name with credentials
    - name: cluster-id
      description: Identifier assinged to cluster by OCM/HCC
  steps:
    - computeResources:
        limits:
          cpu: '100m'
          memory: 64Mi
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      image: quay.io/kuadrant/testsuite-pipelines-tools:latest
      imagePullPolicy: Always
      name: get-osd-credentials
      script: |
        #!/usr/bin/env bash
        set -evo pipefail

        # Use ocm.json created by ocm-login Task
        export OCM_CONFIG=$(workspaces.shared-workspace.path)/ocm.json

        # Get Cluster Information
        password=$(ocm get /api/clusters_mgmt/v1/clusters/$(params.cluster-id)/credentials | jq -r '.admin.password')
        api_url=$(ocm get /api/clusters_mgmt/v1/clusters/$(params.cluster-id) | jq -r '.api.url')
        console_url=$(ocm get /api/clusters_mgmt/v1/clusters/$(params.cluster-id) | jq -r '.console.url')
        login_cmd=$(echo "oc login $api_url -u kubeadmin -p $password")
        cluster_name=$(ocm get /api/clusters_mgmt/v1/clusters/$(params.cluster-id) | jq -r '.name')

        cluster_login=$(ocm get /api/clusters_mgmt/v1/clusters/$(params.cluster-id) | jq -r '[.domain_prefix, .dns.base_domain] | join(".")')
        kubeadmin_url="https://oauth-openshift.apps.$cluster_login/login?then=%2Foauth%2Fauthorize%3Fclient_id%3Dconsole%26redirect_uri%3Dhttps%253A%252F%252Fconsole-openshift-console.apps.$cluster_login%252Fauth%252Fcallback%26response_type%3Dcode%26scope%3Duser%253Afull"

        # Return Cluster Information
        echo -n $password | tee $(results.password.path) && echo ""

        echo -n $api_url | tee $(results.kube-api.path) && echo ""

        echo -n $console_url | tee $(results.console-url.path) && echo ""

        echo -n $login_cmd | tee $(results.login-command.path) && echo ""

        echo -n $kubeadmin_url | tee $(results.kubeadmin-console-url.path)

        echo -n $(params.cluster-id) | tee $(results.cluster-id.path)

        # Create secret with cluster credentials
        echo -n "${cluster_name}-credentials" | tee $(results.credentials-secret.path)
        if [[ "$(params.provision-cluster)" == "true" ]]; then
            kubectl create secret generic "${cluster_name}-credentials" --from-literal=KUBE_USER="kubeadmin" --from-literal=KUBE_PASSWORD="$password" -n ${NAMESPACE}
        fi

        # Store api_url in shared workspace so that kubectl-login Task can access
        # even without the need to pass it as parameter - this would be 'default' in such a case
        echo "$api_url" > $(workspaces.shared-workspace.path)/kube-api.txt
  workspaces:
    - name: shared-workspace

