apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: provision-aws-ocp
spec:
  description: 'Provisions OCP'
  params:
    - name: aws-credentials
      type: string
    - name: cluster-name
      type: string
    - name: pull-secret
      type: string
      description: "Name of the secret containing the pull-secret"
    - name: base-domain
      type: string
      default: "aws.kua.app-services-dev.net"
    - name: region
      type: string
      default: "us-east-1"
    - name: master-size
      type: string
      default: "m6g.xlarge"
    - name: worker-size
      type: string
      default: "m6g.large"
    - name: ssh-key
      type: string
      description: "Name of the secret containing the ssh key"
    - name: installer-arch
      type: string
      default: "arm64"
    - name: osia-settings
      type: string
      description: "Name of the ConfigMap containing the osia settings"
  results:
    - name: kubeconfig-path
      description: Path to new kubeconfig in the workspace
    - name: credentials-secret
      description: secret name with credentials
    - name: ocp-version
      description: OCP version that was installed
  workspaces:
    - name: shared-workspace
      description: "Shared workspace to persist cluster state files between tasks"
  volumes:
    - name: pull-secret-volume
      secret:
        secretName: $(params.pull-secret)
    - name: ssh-key-volume
      secret:
        secretName: $(params.ssh-key)
    - name: osia-settings-volume
      configMap:
        name: $(params.osia-settings)
  steps:
    - computeResources:
        limits:
          cpu: '2000m'        # 2 CPU cores
          memory: '4Gi'        # 4GB RAM
        requests:
          cpu: '1000m'        # 1 CPU core  
          memory: '2Gi'        # 2GB RAM
      env:
        - name: AWS_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCOUNT_ID
              name: $(params.aws-credentials)
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: $(params.aws-credentials)
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: $(params.aws-credentials)
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      image: quay.io/acristur/osia:latest
      imagePullPolicy: IfNotPresent
      name: provision-aws-ocp
      volumeMounts:
        - name: pull-secret-volume
          mountPath: /etc/pull-secret
          readOnly: true
        - name: ssh-key-volume
          mountPath: /etc/ssh-key
          readOnly: true
        - name: osia-settings-volume
          mountPath: /workspace/settings.yaml
          subPath: settings.yaml
          readOnly: true
      command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          
          # Create AWS credentials file
          mkdir -p ~/.aws
          cat > ~/.aws/credentials <<EOF
          [default]
          aws_access_key_id = ${AWS_ACCESS_KEY_ID}
          aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
          EOF

          # Create installers directory
          mkdir -p ~/installers

          # Run osia install
          osia install \
            --cluster-name $(params.cluster-name) \
            --cloud aws \
            --cloud-env default \
            --installers-dir /workspace/installers \
            --base-domain $(params.base-domain) \
            --pull-secret-file /etc/pull-secret/.dockerconfigjson \
            --ssh-key-file /etc/ssh-key/ssh-key \
            --master-flavor $(params.master-size) \
            --worker-flavor $(params.worker-size) \
            --list-of-regions $(params.region) \
            --credentials-file ~/.aws/credentials \
            --dns-provider route53 \
            --dns-credentials-file ~/.aws/credentials \
            --installer-arch arm64 \
            --skip-git

          # Get cluster credentials
          export username=$(grep "Login to the console with user:" $(params.cluster-name)/.openshift_install.log | sed 's/.*user: \\"\([^"]*\)\\".*/\1/')
          export password=$(grep "Login to the console with user:" $(params.cluster-name)/.openshift_install.log | sed 's/.*password: \\"\([^"]*\)\\".*/\1/')

          # Validate username and password were found
          if [ -z "$username" ] || [ -z "$password" ]; then
            echo "ERROR: Failed to retrieve cluster credentials from install log"
            exit 1
          fi
          
          echo "Successfully retrieved cluster credentials"
          mv $(params.cluster-name) shared-workspace

          # Create secret with cluster credentials (delete if exists first)
          echo -n "$(params.cluster-name)-credentials" | tee $(results.credentials-secret.path)
          kubectl delete secret "$(params.cluster-name)-credentials" -n ${NAMESPACE} --ignore-not-found=true
          kubectl create secret generic "$(params.cluster-name)-credentials" --from-literal=KUBE_USER="$username" --from-literal=KUBE_PASSWORD="$password" -n ${NAMESPACE}

          # Get kubeconfig path
          export KUBECONFIG=/workspace/shared-workspace/$(params.cluster-name)/auth/kubeconfig
          echo -n $KUBECONFIG | tee $(results.kubeconfig-path.path)

          # Get OCP version from installers directory
          OCP_VERSION=$(ls -1 /workspace/installers | head -n 1)
          
          # Validate OCP version was found
          if [ -z "$OCP_VERSION" ]; then
            echo "ERROR: Failed to retrieve OCP version from /workspace/installers"
            exit 1
          fi
          
          echo "OCP Version: $OCP_VERSION"
          echo -n $OCP_VERSION | tee $(results.ocp-version.path)

          

          
          

            
      